<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="javadoc" deleted="false" description="&lt;b&gt;&lt;/b&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.b_tag" name="&lt;b&gt;">&lt;b&gt;${word_selection}${}&lt;/b&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag" name="&lt;code&gt;">&lt;code&gt;${word_selection}${}&lt;/code&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;i&gt;&lt;/i&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.i_tag" name="&lt;i&gt;">&lt;i&gt;${word_selection}${}&lt;/i&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;pre&gt;&lt;/pre&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.pre_tag" name="&lt;pre&gt;">&lt;pre&gt;${word_selection}${}&lt;/pre&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="author name" enabled="true" id="org.eclipse.jdt.ui.templates.author" name="@author">@author ${user}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="accountinsession">Account account = (Account) req.getAttribute("u");&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="action">extends Action{&#13;
	public ActionForward execute(&#13;
			ActionMapping mapping,&#13;
			ActionForm form,&#13;
			HttpServletRequest req,&#13;
			HttpServletResponse res) throws Exception{&#13;
		&#13;
		&#13;
		&#13;
		&#13;
		&#13;
		return mapping.findForward("success");&#13;
	}&#13;
		&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="addingtodetail">extends Action{&#13;
	public ActionForward execute(&#13;
			ActionMapping mapping,&#13;
			ActionForm form,&#13;
			HttpServletRequest req,&#13;
			HttpServletResponse res) throws Exception{&#13;
		&#13;
		${modelclass} ${modelobj} = new ${modelclass}Impl();&#13;
		BeanFactory factory = WebApplicationContextUtils&#13;
				.getWebApplicationContext(this.getServlet().getServletContext());&#13;
		SessionFactory sessionFactory = (SessionFactory) factory&#13;
				.getBean("sessionFactory");&#13;
		Session session = sessionFactory.openSession();&#13;
		&#13;
		if(req.getParameter("rid") !=null){&#13;
			Criteria criteria = session.createCriteria(${addingtoclass}.class);&#13;
			criteria.add(Restrictions.idEq(Integer.valueOf(req.getParameter("rid"))));&#13;
			${addingtoclass} ${addingtoobj} = (${addingtoclass}) criteria.uniqueResult();&#13;
			${modelobj}.set${addingtoclass}(${addingtoobj});&#13;
		}else{&#13;
		&#13;
			Criteria criteria = session.createCriteria(${modelclass}.class);&#13;
			&#13;
			if (req.getParameter("id") != null&#13;
					&amp;&amp; !req.getParameter("id").equals("")) {&#13;
				criteria.add(Restrictions.idEq(Integer.valueOf(req.getParameter("id"))));&#13;
				${modelobj} = (${modelclass})criteria.uniqueResult();&#13;
	&#13;
			} else if (req.getAttribute("id") != null&#13;
					&amp;&amp; !req.getAttribute("id").equals("")) {&#13;
				criteria.add(Restrictions.idEq(req.getAttribute("id")));&#13;
				${modelobj} = (${modelclass})criteria.uniqueResult();&#13;
			}&#13;
			&#13;
&#13;
		}&#13;
		Criteria criteria = session.createCriteria(${addingtoclass}.class);&#13;
		req.setAttribute("${addingtoobj}s",criteria.list());&#13;
		req.setAttribute("${modelobj}", ${modelobj});&#13;
		return mapping.findForward("success");&#13;
	}&#13;
	&#13;
	&#13;
}&#13;
&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="appcon">		BeanFactory factory = WebApplicationContextUtils.getWebApplicationContext(this.getServlet().getServletContext());&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="applicationcontext">ApplicationContext context = new ClassPathXmlApplicationContext(new String[] { "applicationContext.xml", "applicationContext-dataSataSource.xml" });&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="cart">				Cart cart = (Cart) req.getSession().getAttribute("cart");</template><template autoinsert="false" context="java" deleted="false" description="dynamic cast" enabled="true" id="org.eclipse.jdt.ui.templates.cast" name="cast">${type} ${new_name} = (${type}) ${name};</template><template autoinsert="false" context="java" deleted="false" description="catch block" enabled="true" id="org.eclipse.jdt.ui.templates.catch" name="catch">catch (${Exception} e) {
	${cursor}// ${todo}: handle exception
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="checknull">		if(req.getParameter("id") != null &amp;&amp; !req.getParameter("id").equals("")){&#13;
			&#13;
		}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="criteria">		Criteria criteria${modelclass} = session.createCriteria(${modelclass}.class); &#13;
		criteria${num}.add(Restrictions.eq("${attr}", ${type}));&#13;
		${modelclass} ${modelobj} = (${modelclass}) criteria${modelclass}.uniqueResult();&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="critlist">		Criteria criteria${modelclass} = session.createCriteria(${modelclass}.class);&#13;
		req.setAttribute("${modelclass}s",criteria${modelclass}.list());&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="datespan">		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");&#13;
		int month=0,year =0 ;&#13;
		if(StringUtils.isNotBlank(req.getParameter("month"))){&#13;
			month = Integer.parseInt(req.getParameter("month"));&#13;
		}&#13;
		year = Integer.parseInt(req.getParameter("year"));&#13;
		Date startdate = dateFormat.parse((year +0)+"/"+( month + 0 )+"/"+(1 +0 ));&#13;
		Calendar calendar = Calendar.getInstance();&#13;
		calendar.setTime(startdate);&#13;
		calendar.add(Calendar.MONTH, 1);&#13;
		Date enddate = new Date(calendar.getTimeInMillis());&#13;
		criteria.add(Restrictions.between("${dateattr}",startdate,enddate));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="dating">		Calendar calendar${num} = Calendar.getInstance();&#13;
		calendar${num}.add(Calendar.DATE,${backdate});&#13;
		Date date = new Date(calendar${num}.getTimeInMillis());&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="detail">&#13;
		${modelclass} ${modelobj} = new ${modelclass}Impl();&#13;
		Session session = new HibernateSession().currentSession(this&#13;
				.getServlet().getServletContext());&#13;
&#13;
		Criteria criteria = session.createCriteria(${modelclass}.class);&#13;
		criteria.add(Restrictions.idEq(Integer.valueOf(req.getParameter("id"))));&#13;
		${modelobj} = (${modelclass})criteria.uniqueResult();&#13;
		req.setAttribute("${modelobj}",${modelobj});&#13;
</template><template autoinsert="false" context="java" deleted="false" description="do while statement" enabled="true" id="org.eclipse.jdt.ui.templates.do" name="do">do {
	${line_selection}${cursor}
} while (${condition});</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="dosomethingonselection">&#13;
		BeanFactory factory = WebApplicationContextUtils&#13;
				.getWebApplicationContext(this.getServlet().getServletContext());&#13;
&#13;
		SessionFactory sessionFactory = (SessionFactory) factory&#13;
				.getBean("sessionFactory");&#13;
		Session session = sessionFactory.openSession();&#13;
		Transaction transaction = session.beginTransaction();&#13;
&#13;
		SelectionBean bean = (SelectionBean)form;&#13;
&#13;
		for (int i = 0; i &lt; bean.getId().length; i++) {&#13;
			${modelclass} ${modelobj} = new ${modelclass}Impl();&#13;
			${modelobj}.set${dosomething}&#13;
			Criteria criteria2 = session.createCriteria(${secoundmodel}.class);&#13;
			criteria2.add(Restrictions.idEq(Integer.valueOf(bean.getId()[i])));&#13;
			${secoundmodel} ${secoundobj} = (${secoundmodel})criteria2.uniqueResult();&#13;
			${modelobj}.set${secoundmodel}(${secoundobj});&#13;
			session.save(${modelobj});&#13;
			${secoundobj}.${secounddosomething}&#13;
			session.save(${secoundobj});&#13;
		}&#13;
		transaction.commit();&#13;
		session.flush();&#13;
		sessionFactory.close();</template><template autoinsert="true" context="java" deleted="false" description="download desu" enabled="true" name="download">		res.setHeader("Pragma", ""); &#13;
		res.setHeader("Cache-Control", ""); &#13;
		res.setHeader("Content-Disposition","attachment; filename=${filename}");&#13;
</template><template autoinsert="false" context="java" deleted="false" description="else block" enabled="true" id="org.eclipse.jdt.ui.templates.else" name="else">else {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="else if block" enabled="true" id="org.eclipse.jdt.ui.templates.elseif" name="elseif">else if (${condition}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="error">		String error = "";&#13;
		if(StringUtils.isNotBlank(error)){&#13;
			req.getSession().setAttribute("error", error);&#13;
			return mapping.findForward("error");&#13;
			&#13;
		}&#13;
</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;false&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_false" name="false">&lt;code&gt;false&lt;/code&gt;</template><template autoinsert="false" context="java" deleted="false" description="iterate over array" enabled="true" id="org.eclipse.jdt.ui.templates.for_array" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate over array with temporary variable" enabled="true" id="org.eclipse.jdt.ui.templates.for_temp" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${array_type} ${array_element} = ${array}[${index}];
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate over collection" enabled="true" id="org.eclipse.jdt.ui.templates.for_collection" name="for">for (Iterator ${iterator} = ${collection}.iterator(); ${iterator}.hasNext(); ) {
	${type} ${element} = (${type}) ${iterator}.next();
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate over an array or Iterable" enabled="true" id="org.eclipse.jdt.ui.templates.for_iterable" name="foreach">for (${iterable_type} ${iterable_element} : ${iterable}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="forRelatedCollection">		for (Iterator iter = j2eeStory.get${noun}s().iterator(); iter.hasNext();) {&#13;
			${noun} ${obj} = (${noun}) iter.next();&#13;
			${obj}.&#13;
		}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="httpclient">		try {&#13;
			HttpClient httpClient = new HttpClient();&#13;
			GetMethod getMethod = new GetMethod(${url});&#13;
			httpClient.executeMethod(getMethod);&#13;
			String manualxml = getMethod.getResponseBodyAsString();&#13;
			&#13;
			&#13;
		} catch (Exception e) {&#13;
			e.printStackTrace();&#13;
		}&#13;
</template><template autoinsert="false" context="java" deleted="false" description="if statement" enabled="true" id="org.eclipse.jdt.ui.templates.if" name="if">if (${condition}) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="if else statement" enabled="true" id="org.eclipse.jdt.ui.templates.ifelse" name="ifelse">if (${condition}) {
	${cursor}
} else {
	
}</template><template autoinsert="false" context="java" deleted="false" description="dynamic type test and cast" enabled="true" id="org.eclipse.jdt.ui.templates.instanceof" name="instanceof">if (${name} instanceof ${type}) {
	${type} ${new_name} = (${type})${name};
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="keiyou">criteria${num}.add(Restrictions.eq("${modelclass}",new Boolean(true)));</template><template autoinsert="false" context="java" deleted="false" description="lazy creation" enabled="true" id="org.eclipse.jdt.ui.templates.lazy" name="lazy">if (${name} == null) {
	${name} = new ${type}(${arguments});
	${cursor}
}

return ${name};</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="listbycondition">extends Action{&#13;
	public ActionForward execute(&#13;
			ActionMapping mapping,&#13;
			ActionForm form,&#13;
			HttpServletRequest req,&#13;
			HttpServletResponse res) throws Exception{&#13;
		Session session = new HibernateSession().currentSession(this&#13;
				.getServlet().getServletContext());&#13;
&#13;
		Criteria criteria = session.createCriteria(${model}.class);&#13;
		Vector vector = new Vector();&#13;
		for (Iterator iter = criteria.list().iterator(); iter.hasNext();) {&#13;
			${model} ${obj} = (${model}) iter.next();&#13;
			if(!${obj}.is${condition1}() &amp;&amp; !${obj}.${condition2} ){&#13;
				vector.add(${obj});&#13;
			}&#13;
		}&#13;
		req.setAttribute("${obj}s",vector);&#13;
		session.flush();&#13;
		&#13;
		&#13;
		&#13;
		return mapping.findForward("success");&#13;
	}&#13;
	&#13;
	&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="localstaticdata">			SAXReader reader  = new SAXReader();&#13;
			Document staticDataDocument = reader.read("staticData.xml");&#13;
			Element staticDataElement = staticDataDocument.getRootElement();&#13;
			Element ${attr}Element =staticDataElement.elementByID("${attr}"); &#13;
			String ${attr}= ${attr}Element.getText();</template><template autoinsert="false" context="java" deleted="false" description="main method" enabled="true" id="org.eclipse.jdt.ui.templates.main" name="main">public static void main(String[] args) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="create new object" enabled="true" id="org.eclipse.jdt.ui.templates.new" name="new">${type} ${name} = new ${type}(${arguments});</template><template autoinsert="false" context="java" deleted="false" description="non-externalized string marker" enabled="true" id="org.eclipse.jdt.ui.templates.non-nls" name="nls">//$$NON-NLS-${N}$$</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="notnull">if(StringUtils.isNotBlank(req.getParameter("${param}"))){&#13;
	${operation}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="null">if(StringUtils.isBlank(req.getParameter("${param}"))){&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="order">criteria.addOrder(Order.asc("${attr}"));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="ordering">criteria${instance}.addOrder(Order.${asc}("${attr}"));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="param">req.getParameter("${param}")</template><template autoinsert="false" context="java" deleted="false" description="private method" enabled="true" id="org.eclipse.jdt.ui.templates.private_method" name="private_method">private ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="private static method" enabled="true" id="org.eclipse.jdt.ui.templates.private_static_method" name="private_static_method">private static ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="protected method" enabled="true" id="org.eclipse.jdt.ui.templates.protected_method" name="protected_method">protected ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="public method" enabled="true" id="org.eclipse.jdt.ui.templates.public_method" name="public_method">public ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="redirect">		new HTTPGetRedirection(req,res,"${uri}",${id});&#13;
		return null;</template><template autoinsert="true" context="java" deleted="false" description="re" enabled="true" name="rel">&#13;
&#13;
		Integer ${relatedclass}Int = ${formobj}.get${relatedclass}();&#13;
		${formobj}.set${relatedclass}(null);&#13;
&#13;
		Criteria criteria${num} = session.createCriteria(${relatedclass}.class);&#13;
		criteria${num}.add(Restrictions.idEq(${relatedclass}Int));&#13;
		${relatedclass} ${relatedClassObj} = (${relatedclass})criteria${num}.uniqueResult();&#13;
		${modelobj}.set${relatedclass}(${relatedClassObj});&#13;
&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="req">req.setAttribute("${key}",${content});</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="rest">criteria${num}.add(Restrictions.eq("${modelclass}",new ${type}()));</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="restbymonthspanondateattr">&#13;
public class ${modelclass}sByMonthSpanOn${attr} extends Action{&#13;
	public ActionForward execute(&#13;
			ActionMapping mapping,&#13;
			ActionForm form,&#13;
			HttpServletRequest req,&#13;
			HttpServletResponse res) throws Exception{&#13;
		if(req.getParameter("startyear")==null){&#13;
			req.setAttribute("${modelobj}s",new Vector());&#13;
			return mapping.findForward("success");&#13;
		}&#13;
		BeanFactory factory = WebApplicationContextUtils&#13;
		.getWebApplicationContext(this.getServlet().getServletContext());&#13;
		SessionFactory sessionFactory = (SessionFactory) factory&#13;
		.getBean("sessionFactory");&#13;
		Session session = sessionFactory.openSession();&#13;
		&#13;
		Integer startyear = Integer.valueOf(req.getParameter("startyear"));&#13;
		Integer startmonth = Integer.valueOf(req.getParameter("startmonth"));&#13;
		Integer endyear = Integer.valueOf(req.getParameter("endyear"));&#13;
		Integer endmonth = Integer.valueOf(req.getParameter("endmonth"));&#13;
		&#13;
		req.setAttribute("startyear",startyear);&#13;
		req.setAttribute("startmonth",startmonth);&#13;
		req.setAttribute("endyear",endyear);&#13;
		req.setAttribute("endmonth",endmonth);&#13;
&#13;
		Calendar startcalendar = Calendar.getInstance();&#13;
&#13;
		Calendar calendar = Calendar.getInstance();&#13;
		calendar.set(Calendar.YEAR,Integer.parseInt(req.getParameter("startyear")));&#13;
		calendar.set(Calendar.MONTH,Integer.parseInt(req.getParameter("startmonth")) - 1);&#13;
		calendar.set(Calendar.DAY_OF_MONTH,1);&#13;
		calendar.set(Calendar.HOUR_OF_DAY,0);&#13;
		Date startdate = new Date(calendar.getTimeInMillis());&#13;
		calendar.add(Calendar.MONTH,1);&#13;
		Date enddate = new Date(calendar.getTimeInMillis());&#13;
&#13;
		&#13;
		Criteria criteria = session.createCriteria(${modelclass}.class);&#13;
//		criteria.add(Restrictions.eq("current", new Boolean(true)));&#13;
		criteria.add(Restrictions.gt("${attr}",startdate ));&#13;
		criteria.add(Restrictions.lt("${attr}",enddate));&#13;
		&#13;
		Vector vector = new Vector();&#13;
		vector.addAll(criteria.list());&#13;
		&#13;
		if(req.getParameter("export")!=null){&#13;
    		res.setHeader("Pragma", ""); &#13;
    		res.setHeader("Cache-Control", ""); &#13;
    		res.setHeader("Content-Disposition","attachment; filename=${modelclass}sByMonthSpanOn${attr}.xls");&#13;
			XlsExportOf${modelclass}sByMonthSpanOn${attr} xlsExportOf${modelclass}sByMonthSpanOn${attr} = new XlsExportOf${modelclass}sByMonthSpanOn${attr}(vector,res.getOutputStream(),session);&#13;
			sessionFactory.close();&#13;
			return null;&#13;
		}&#13;
&#13;
		&#13;
		req.setAttribute("${modelobj}s",vector);&#13;
		session.flush();&#13;
		sessionFactory.close();&#13;
		&#13;
		&#13;
		&#13;
		return mapping.findForward("success");&#13;
	}&#13;
	&#13;
	&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="rss">		String urlstr = req.getParameter("url");&#13;
        Vector vector = new Vector();&#13;
        try {&#13;
           URL url = new URL(urlstr);&#13;
            ChannelIF channel = FeedParser.parse(new ChannelBuilder(), url);&#13;
            Collection items = channel.getItems();&#13;
            channel = FeedParser.parse(new ChannelBuilder(), url);&#13;
            items = channel.getItems();&#13;
            &#13;
            for (Iterator iter = items.iterator(); iter.hasNext();) {&#13;
				ItemIF itemIF = (ItemIF) iter.next();&#13;
				vector.add(itemIF);&#13;
			}&#13;
        } catch (Exception e) {&#13;
            e.printStackTrace();&#13;
        }&#13;
        req.setAttribute("outputs",vector);&#13;
</template><template autoinsert="false" context="java" deleted="false" description="runnable" enabled="true" id="org.eclipse.jdt.ui.templates.runnable" name="runnable">new Runnable() {
	public void run() {
		${line_selection}
	}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="saving">		SessionFactory sessionFactory = (SessionFactory)factory.getBean("sessionFactory");&#13;
		Session session = sessionFactory.openSession();&#13;
		Transaction transaction = session.beginTransaction();&#13;
		session.saveOrUpdate();&#13;
		transaction.commit();&#13;
		session.flush();&#13;
		sessionFactory.close();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="session">		Session session = new HibernateSession().currentSession(this.getServlet().getServletContext());</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="staticdata">				Criteria criteria${num} = session.createCriteria(StaticData.class);&#13;
				criteria${num}.add(Restrictions.eq("id", new Integer(1)));&#13;
				StaticData staticData = (StaticData) criteria${num}.uniqueResult();&#13;
</template><template autoinsert="false" context="java" deleted="false" description="switch case statement" enabled="true" id="org.eclipse.jdt.ui.templates.switch" name="switch">switch (${key}) {
	case ${value}:
		${cursor}
		break;

	default:
		break;
}</template><template autoinsert="false" context="java" deleted="false" description="synchronized block" enabled="true" id="org.eclipse.jdt.ui.templates.synchronized" name="synchronized">synchronized (${mutex}) {
	${line_selection}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="sys2">		if(req.getSession().getAttribute("systemmessage") !=null){&#13;
			req.setAttribute("systemmessage",req.getSession().getAttribute("systemmessage"));&#13;
			req.getSession().setAttribute("systemmessage",null);&#13;
		}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="print to standard error" enabled="true" id="org.eclipse.jdt.ui.templates.syserr" name="syserr">System.err.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="sysme">req.getSession().setAttribute("systemmessage","${systemmessage}");</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="sysme2">		if(req.getSession().getAttribute("systemmessage")!=null){&#13;
			req.setAttribute("systemmessage",req.getSession().getAttribute("systemmessage"));&#13;
			req.getSession().setAttribute("systemmessage",null);&#13;
&#13;
		}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="print to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.sysout" name="sysout">System.out.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="java" deleted="false" description="print current method to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.systrace" name="systrace">System.out.println("${enclosing_type}.${enclosing_method}()");</template><template autoinsert="true" context="java" deleted="false" description="aaaa" enabled="true" name="test">int ${testdirective} ${testdirective};&#13;
int testtest = 0;&#13;
int ${testdirective};&#13;
</template><template autoinsert="false" context="java" deleted="false" description="test method" enabled="true" id="org.eclipse.jdt.ui.templates.test" name="test">public void test${name}() throws Exception {
	${cursor} 
}</template><template autoinsert="false" context="java" deleted="false" description="convert collection to array" enabled="true" id="org.eclipse.jdt.ui.templates.toarray" name="toarray">(${type}[]) ${collection}.toArray(new ${type}[${collection}.size()])</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="transaction">			Transaction transaction = session.beginTransaction();&#13;
            session.${method}(${modelobj});&#13;
			transaction.commit();&#13;
			session.flush();&#13;
</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;true&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_true" name="true">&lt;code&gt;true&lt;/code&gt;</template><template autoinsert="false" context="java" deleted="false" description="try catch block" enabled="true" id="org.eclipse.jdt.ui.templates.try" name="try">try {
	${line_selection}${cursor}
} catch (${Exception} e) {
	// ${todo}: handle exception
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="uniq">Criteria criteria = session.createCriteria(${model}.class);&#13;
criteria.add(Restrictions.idEq(Integer.valueOf(req.getParameter("id"))));&#13;
${model} ${obj} = (${model})criteria.uniqueResult();&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="uniqforupdate">&#13;
		&#13;
		BeanFactory factory = WebApplicationContextUtils&#13;
		.getWebApplicationContext(this.getServlet().getServletContext());&#13;
&#13;
		SessionFactory sessionFactory = (SessionFactory) factory&#13;
		.getBean("sessionFactory");&#13;
		Session session = sessionFactory.openSession();&#13;
		Transaction transaction = session.beginTransaction();&#13;
		&#13;
		Criteria criteria = session.createCriteria(${modelclass}.class);&#13;
		criteria.add(Restrictions.idEq(Integer.valueOf(req.getParameter("id"))));&#13;
		${modelclass} ${modelobj} = (${modelclass}) criteria.uniqueResult();&#13;
//		${modelobj}.setName()&#13;
		session.saveOrUpdate(${modelobj});&#13;
		transaction.commit();&#13;
		session.flush();&#13;
		sessionFactory.close();&#13;
&#13;
		req.setAttribute("id", ${modelobj}.getId());&#13;
		</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="userfromsession">IntraUser intraUser = (IntraUser)req.getAttribute("u");</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="volist">		if (StringUtils.isBlank(req.getParameter("vo"))) {&#13;
			res.setHeader("Pragma", ""); &#13;
			res.setHeader("Cache-Control", ""); &#13;
			res.setHeader("Content-Disposition","attachment; filename=${listclass}esOfA${modelclass}."+ ${modelobj}.getId().toString()+".out");&#13;
			ObjectOutputStream objectOutputStream = new ObjectOutputStream(res.getOutputStream());&#13;
			objectOutputStream.writeObject(vector);&#13;
			session.flush();&#13;
		}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="vp">		${modelclass} ${modelobj} = new ${modelclass}Impl();&#13;
		${modelFormClass} ${formobj}= (${modelFormClass})form;&#13;
		BeanUtils.copyProperties(${modelobj},${formobj});&#13;
		StringFullfiller.fullfil(${modelobj});&#13;
		if(${formobj}.getId() == null || ${formobj}.getId().intValue() == 0){&#13;
			${modelobj}.setId(null);&#13;
		}else{&#13;
			${modelobj}.setId(${formobj}.getId());&#13;
		}&#13;
		&#13;
		//this is sample. change below according to each model to VP.&#13;
		${modelobj}.setContent(${formobj}.getContent());&#13;
&#13;
		Session session = new HibernateSession().currentSession(this&#13;
				.getServlet().getServletContext());&#13;
&#13;
		Transaction transaction = session.beginTransaction();&#13;
		session.saveOrUpdate(${modelobj});&#13;
		transaction.commit();&#13;
		session.flush();&#13;
		&#13;
		&#13;
		req.setAttribute("id",${modelobj}.getId());</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="vpr">		&#13;
		${modelclass} ${modelobj} = new ${modelclass}Impl();&#13;
		${modelFormClass} ${formobj}= (${modelFormClass})form;&#13;
		Integer ${relatedclass}Int = ${formobj}.get${relatedclass}();&#13;
		${formobj}.set${relatedclass}(null);&#13;
&#13;
		BeanUtils.copyProperties(${modelobj},${formobj});&#13;
		StringFullfiller.fullfil(${modelobj});&#13;
		&#13;
		if(${formobj}.getId() == null || ${formobj}.getId().intValue() == 0){&#13;
			${modelobj}.setId(null);&#13;
		}else{&#13;
			${modelobj}.setId(${formobj}.getId());&#13;
		}&#13;
		&#13;
		//this is sample. change below according to each model to VP.&#13;
//		${modelobj}.setContent(${formobj}.getContent());&#13;
&#13;
		BeanFactory factory = WebApplicationContextUtils&#13;
				.getWebApplicationContext(this.getServlet().getServletContext());&#13;
		&#13;
		SessionFactory sessionFactory = (SessionFactory) factory&#13;
				.getBean("sessionFactory");&#13;
		Session session = sessionFactory.openSession();&#13;
		Transaction transaction = session.beginTransaction();&#13;
		Criteria criteria = session.createCriteria(${relatedclass}.class);&#13;
		criteria.add(Restrictions.idEq(${relatedclass}Int));&#13;
		${relatedclass} ${relatedClassObj} = (${relatedclass})criteria.uniqueResult();&#13;
		${modelobj}.set${relatedclass}(${relatedClassObj});&#13;
&#13;
		session.saveOrUpdate(${modelobj});&#13;
		transaction.commit();&#13;
		session.flush();&#13;
		sessionFactory.close();&#13;
		&#13;
		&#13;
		req.setAttribute("id",${modelobj}.getId());&#13;
		return mapping.findForward("success");</template><template autoinsert="false" context="java" deleted="false" description="iterate with enumeration" enabled="true" id="org.eclipse.jdt.ui.templates.while_enumeration" name="while">while (${enumeration}.hasMoreElements()) {
	${type} ${element} = (${type}) ${enumeration}.nextElement();
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="iterate with iterator" enabled="true" id="org.eclipse.jdt.ui.templates.while_iterator" name="while">while (${iterator}.hasNext()) {
	${type} ${element} = (${type}) ${iterator}.next();
	${cursor}
}</template><template autoinsert="false" context="java" deleted="false" description="while loop with condition" enabled="true" id="org.eclipse.jdt.ui.templates.while_condition" name="while">while (${condition}) {
	${line_selection}${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="xls">Vector vector,OutputStream outputStream,Session session){&#13;
&#13;
        try{&#13;
        	WorkbookSettings ws = new WorkbookSettings();&#13;
&#13;
        	ws.setLocale(new Locale("ja", "JP"));&#13;
        	ws.setEncoding("Windows-31J");&#13;
        	WritableWorkbook workbook = Workbook.createWorkbook(outputStream, ws);&#13;
        	WritableSheet sheet = workbook.createSheet("sheet", 0);&#13;
        	ws.setGCDisabled(true);&#13;
        	&#13;
        	int x = 0;&#13;
        	sheet.addCell(new Label(x++, 0, "${title1}"));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
        	sheet.addCell(new Label(x++, 0, ""));&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
        &#13;
        	x = 0;&#13;
        	int y= 1;&#13;
    		for (Iterator iter = vector.iterator(); iter.hasNext();) {&#13;
    			x = 0;&#13;
    			${modelclass} ${modelobj} = (${modelclass}) iter.next();&#13;
    			sheet.addCell(new Label(x++, y, ${modelobj}.get${attr1}()));&#13;
    			sheet.addCell(new Number(x++, y, ${modelobj}.get${attr2}()));&#13;
    			sheet.addCell(new DateTime(x++, y, ${modelobj}.get${attr3}()));&#13;
    			&#13;
    			y++;&#13;
    		}&#13;
        	&#13;
        	workbook.write();&#13;
        	workbook.close();&#13;
		&#13;
        }catch(Exception e){&#13;
            System.out.println(e.toString());&#13;
        }finally{&#13;
        }&#13;
	}&#13;
	&#13;
&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="xls">Vector vector,OutputStream outputStream,Session session){&#13;
&#13;
		try{&#13;
			WorkbookSettings ws = new WorkbookSettings();&#13;
&#13;
			ws.setLocale(new Locale("ja", "JP"));&#13;
			ws.setEncoding("Windows-31J");&#13;
			WritableWorkbook workbook = Workbook.createWorkbook(outputStream, ws);&#13;
			WritableSheet sheet = workbook.createSheet("sheet", 0);&#13;
			ws.setGCDisabled(true);&#13;
&#13;
				int x = 0;&#13;
				sheet.addCell(new Label(x++, 0, "RefNo."));&#13;
				sheet.addCell(new Label(x++, 0, "企画型番"));&#13;
			sheet.addCell(new Label(x++, 0, "機種名"));&#13;
			sheet.addCell(new Label(x++, 0, "仕様別記号"));&#13;
			sheet.addCell(new Label(x++, 0, "出図日"));&#13;
			sheet.addCell(new Label(x++, 0, "実行MP"));&#13;
			sheet.addCell(new Label(x++, 0, "基準納期"));&#13;
			sheet.addCell(new Label(x++, 0, "支払実行"));&#13;
			sheet.addCell(new Label(x++, 0, "従来SM売上実行"));&#13;
			sheet.addCell(new Label(x++, 0, "従来SM売上実行金額"));&#13;
			sheet.addCell(new Label(x++, 0, "IC売上実行"));&#13;
			sheet.addCell(new Label(x++, 0, "IC売上実行金額"));&#13;
			sheet.addCell(new Label(x++, 0, "Web売上実行"));&#13;
			sheet.addCell(new Label(x++, 0, "Web売上実行金額"));&#13;
			sheet.addCell(new Label(x++, 0, "タイプ"));&#13;
			sheet.addCell(new Label(x++, 0, "担当カンパニー"));&#13;
			sheet.addCell(new Label(x++, 0, "事業部コード"));&#13;
			sheet.addCell(new Label(x++, 0, "停止理由"));&#13;
			sheet.addCell(new Label(x++, 0, "フラグ"));&#13;
			sheet.addCell(new Label(x++, 0, "備考"));&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");&#13;
&#13;
			int y= 1;&#13;
			for (Iterator iter = vector.iterator(); iter.hasNext();) {&#13;
				x = 0;&#13;
				${modelclass} ${modelobj} = (${modelclass}) iter.next();&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getRefno()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getModelcode()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getTypename()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getShimuke()));&#13;
				sheet.addCell(new Label(x++, y, dateFormat.format(${modelobj}.getShutsuzudate())));&#13;
				sheet.addCell(new Label(x++, y, dateFormat.format(${modelobj}.getMp())));&#13;
				sheet.addCell(new Label(x++, y, dateFormat.format(${modelobj}.getBasedeadline())));&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getPayment()));&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getSalesnum()));&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getSalesprice()));&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getIcsalesnum()));&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getIcsales()));&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getWebsalesnum()));&#13;
				sheet.addCell(new Number(x++, y, ${modelobj}.getWebsales()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getType()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getResponsiblecomponey()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getDepartmentcode()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getStoppedreason()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.get${modelclass}ionflag()));&#13;
				sheet.addCell(new Label(x++, y, ${modelobj}.getDescription()));&#13;
				y++;&#13;
			}&#13;
&#13;
			workbook.write();&#13;
			workbook.close();&#13;
&#13;
		}catch(Exception e){&#13;
			System.out.println(e.toString());&#13;
		}finally{&#13;
		}&#13;
	}&#13;
&#13;
&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="xmlparse">			SAXReader reader = new SAXReader();&#13;
			Document document = reader.read(new URL(data.getRemotehosturi()+"/StrutsConfigOfSentencesOfNonAllVerbsOfAJ2eeStory.do?name="+data.getNameofj2eeproject()));&#13;
	        root = document.getRootElement();&#13;
	        for ( Iterator i = root.elementIterator("action-mappings"); i.hasNext(); ) {&#13;
	            Element element = (Element) i.next();&#13;
	            for (Iterator iter = element.elementIterator("action"); iter.hasNext();) {&#13;
		            Element actionelement = (Element) iter.next();&#13;
		            System.err.println("starts-----------------------------------------");&#13;
		            System.err.println(actionelement.getName());&#13;
		            downloadedhashtable.put(actionelement.attributeValue("path"),actionelement);&#13;
		            System.err.println(actionelement.attributeValue("path"));&#13;
		            System.err.println(actionelement.attributeValue("type"));&#13;
		            System.err.println("ends-----------------------------------------");&#13;
				}&#13;
	        }&#13;
	        &#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="zerodate">		Date zerodate = new Date();&#13;
		zerodate.setTime(864000000);&#13;
		req.setAttribute("zerodate",zerodate);&#13;
</template></templates>